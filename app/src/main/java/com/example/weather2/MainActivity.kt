package com.example.weather2

import android.graphics.Color
import android.os.Bundle
import android.util.Log
import android.view.View
import androidx.appcompat.app.AppCompatActivity
import androidx.core.view.GravityCompat
import androidx.core.widget.NestedScrollView
import androidx.lifecycle.lifecycleScope
import androidx.recyclerview.widget.LinearLayoutManager
import com.example.weather2.Model.WeatherData
import com.example.weather2.Model.testWeather
import com.example.weather2.ViewModel.WeatherAdapter
import com.example.weather2.databinding.ActivityMainBinding
import com.example.weather2.databinding.HourWeatherBinding
import com.google.firebase.Firebase
import com.google.firebase.database.DataSnapshot
import com.google.firebase.database.DatabaseError
import com.google.firebase.database.FirebaseDatabase
import com.google.firebase.database.ValueEventListener
import com.google.firebase.database.database
import com.google.firebase.firestore.FirebaseFirestore
import kotlinx.coroutines.delay
import kotlinx.coroutines.isActive
import kotlinx.coroutines.launch
import java.text.SimpleDateFormat
import java.util.Calendar
import java.util.Date
import java.util.Locale

class MainActivity : AppCompatActivity() {
    private lateinit var binding: ActivityMainBinding
    private lateinit var bindingHourWeather: HourWeatherBinding
    private var lastScrollTime = 0L

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)

        bindingHourWeather = HourWeatherBinding.bind(binding.includeHourWeather.hourWeather)
        setupRecyclerView()
        //c·∫≠p nh·∫≠t th·ªùi gian li√™n t·ª•c
        getDayEndTime()
//         ƒë·∫©y d·ªØ li·ªáu l√™n firestore database
//        val db = FirebaseFirestore.getInstance()
//        // Th√™m d·ªØ li·ªáu v√†o collection "weather_data"
//        val weather=testWeather("weather123",30,70,35,25)
//        db.collection("weather_data").document(weather.id ?: "default_id")
//            .set(weather)
//            .addOnSuccessListener {
//                println("D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c ƒë·∫©y l√™n Firebase th√†nh c√¥ng!")
//            }
//            .addOnFailureListener { e ->
//                println("L·ªói khi ƒë·∫©y d·ªØ li·ªáu: ${e.message}")
//            }


        // c·∫≠p nh·∫≠t d·ªØ li·ªáu li√™n t·ª•c t·ª´ firestore database
//        val db = FirebaseFirestore.getInstance()
//        val docRef = db.collection("weather_data").document("weather123")
//
//        // L·∫Øng nghe thay ƒë·ªïi trong document "weather123"
//        docRef.addSnapshotListener { snapshot, error ->
//            if (error != null) {
//                Log.e("Firestore", "L·ªói khi l·∫Øng nghe Firestore: ${error.message}")
//                return@addSnapshotListener
//            }
//
//            if (snapshot != null && snapshot.exists()) {
//                val id = snapshot.getString("id") ?: "N/A"
//                val temperature = snapshot.getLong("temperature")?.toInt() ?: 0
//                val humidity = snapshot.getLong("humidity")?.toInt() ?: 0
//                val tempMax = snapshot.getLong("temperatureMax")?.toInt() ?: 0
//                val tempMin = snapshot.getLong("temperatureMin")?.toInt() ?: 0
//
//                binding.tvTempHourLive.text=temperature.toString().plus("¬∞")
//                binding.tvHumidyHourLive1.text=humidity.toString().plus("%")
//                binding.tvHumidyHourLive2.text=humidity.toString().plus("%")
//                binding.tvTempDayMax1.text=tempMax.toString().plus("¬∞")
//                binding.tvTempDayMax2.text=tempMax.toString().plus("¬∞")
//                binding.tvTempDayMin1.text=tempMin.toString().plus("¬∞")
//                binding.tvTempDayMin2.text=tempMin.toString().plus("¬∞")
//
//                Log.d("Firestore", "üî• C·∫≠p nh·∫≠t d·ªØ li·ªáu: ID=$id, Temp=$temperature, Humidity=$humidity")
//
//            } else {
//                Log.d("Firestore", "Document kh√¥ng t·ªìn t·∫°i!")
//            }
//        }


        //c·∫≠p nh·∫≠t d·ªØ li·ªáu li√™n t·ª•c t·ª´ realtime database
        val database = FirebaseDatabase.getInstance()
        val myRef = database.getReference("weather_data")


        myRef.addValueEventListener(object : ValueEventListener {
            override fun onDataChange(snapshot: DataSnapshot) {
                if (snapshot.exists()) {
                    val temperature = snapshot.child("temperature").getValue(Double::class.java) ?: 0.0
                    val humidity = snapshot.child("humidity").getValue(Double::class.java) ?: 0.0
                    val pressure = snapshot.child("pressure").getValue(Double::class.java) ?: 0.0
                    val light = snapshot.child("light").getValue(Int::class.java) ?: 0
                    val rain = snapshot.child("rain").getValue(Int::class.java) ?: 0

                    // C·∫≠p nh·∫≠t d·ªØ li·ªáu l√™n giao di·ªán
                    binding.tvTempHourLive.text = "${temperature}¬∞"
                    binding.tvHumidyHourLive1.text = "${humidity}%"
                    binding.tvHumidyHourLive2.text = "${humidity}%"
                    binding.tvTempDayMax1.text = "${temperature + 2}¬∞"  // V√≠ d·ª• d·ªØ li·ªáu gi·∫£ l·∫≠p
                    binding.tvTempDayMax2.text = "${temperature + 2}¬∞"
                    binding.tvTempDayMin1.text = "${temperature - 2}¬∞"
                    binding.tvTempDayMin2.text = "${temperature - 2}¬∞"

                    Log.d("Firebase", "D·ªØ li·ªáu c·∫≠p nh·∫≠t: Temp=$temperature, Humidity=$humidity, Pressure=$pressure, Light=$light, Rain=$rain")
                } else {
                    Log.d("Firebase", "Kh√¥ng c√≥ d·ªØ li·ªáu trong Realtime Database!")
                }
            }

            override fun onCancelled(error: DatabaseError) {
                Log.e("Firebase", "L·ªói khi ƒë·ªçc d·ªØ li·ªáu: ${error.message}")
            }
        })

    }

    private fun setupRecyclerView() {
        val weatherList = listOf(
            WeatherData("10:00", 23, 64, "10d"),
            WeatherData("11:00", 24, 66, "10d"),
            WeatherData("12:00", 25, 73, "10d"),
            WeatherData("13:00", 23, 74, "10d"),
            WeatherData("14:00", 26, 67, "10d"),
            WeatherData("15:00", 23, 68, "10d"),
            WeatherData("10:00", 23, 64, "10d"),
            WeatherData("11:00", 24, 66, "10d"),
            WeatherData("12:00", 25, 73, "10d"),
            WeatherData("13:00", 23, 74, "10d"),
            WeatherData("14:00", 26, 67, "10d"),
            WeatherData("15:00", 23, 68, "10d"),
            WeatherData("10:00", 23, 64, "10d"),
            WeatherData("11:00", 24, 66, "10d"),
            WeatherData("12:00", 25, 73, "10d"),
            WeatherData("13:00", 23, 74, "10d"),
            WeatherData("14:00", 26, 67, "10d"),
            WeatherData("15:00", 23, 68, "10d")
        )

        bindingHourWeather.recyclerViewWeatherHour.apply {
            layoutManager = LinearLayoutManager(context, LinearLayoutManager.HORIZONTAL, false)
            adapter = WeatherAdapter(weatherList)
        }
    }
    private fun toggleVisibility(visible1: Int, visible2: Int) {
        binding.ll1.visibility = visible1
        binding.ll2.visibility = visible1
        binding.ll3.visibility = visible2
        binding.ll4.visibility = visible2
        binding.ll5.visibility = visible2
    }
//h√†m c·∫≠p nh·∫≠t th·ªùi gian li√™n t·ª•c
    private fun getDayEndTime()
    {
        lifecycleScope.launch {
            while(isActive)
            {
                binding.tvTime.text=getCurrentTime()
                binding.tvDay.text=getCurrentDayInVN()
                delay(10)
            }
        }
    }
// h√†m l·∫•y th·ª© trong tu·∫ßn b·∫±ng ti·∫øng vi·ªát
    private fun getCurrentDayInVN() : String
    {
    val calendar=Calendar.getInstance()
        val daysOfWeek= arrayOf(
            "Ch·ªß nh·∫≠t", "Th·ª© Hai", "Th·ª© Ba","Th·ª© T∆∞","Th·ª© NƒÉm","Th·ª© S√°u","Th·ª© B·∫£y"
        )
        return daysOfWeek[calendar.get(Calendar.DAY_OF_WEEK)-1]
    }
    //H√†m l·∫•y th·ªùi gian
    private fun getCurrentTime() : String
    {
        val sdf=SimpleDateFormat("HH:mm", Locale.getDefault())
        return sdf.format(Date())
    }
}
